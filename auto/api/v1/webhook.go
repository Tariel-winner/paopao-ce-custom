// Code generated by go-mir. DO NOT EDIT.
// versions:
// - mir v4.2.0

package v1

import (
	"net/http"

	"github.com/alimy/mir/v4"
	"github.com/gin-gonic/gin"
	"github.com/rocboss/paopao-ce/internal/model/web"
)

type Webhook interface {
	_default_

	// Chain provide handlers chain for gin
	Chain() gin.HandlersChain

	// AudioWebhook handles webhook callbacks for audio content updates
	AudioWebhook(req *web.AudioWebhookReq) mir.Error

	// RegisterSession handles session registration for peer_id to user_id mapping
	RegisterSession(req *web.SessionRegistrationReq) mir.Error

	mustEmbedUnimplementedWebhookServant()
}

// RegisterWebhookServant register Webhook servant to gin
func RegisterWebhookServant(e *gin.Engine, s Webhook) {
	router := e.Group("v1")
	// use chain for router
	middlewares := s.Chain()
	router.Use(middlewares...)

	// register routes info to router
	router.Handle("POST", "/audio/webhook", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.AudioWebhookReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return
		}
		s.Render(c, nil, s.AudioWebhook(req))
	})

	router.Handle("POST", "/session/register", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.SessionRegistrationReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return
		}
		s.Render(c, nil, s.RegisterSession(req))
	})
}

// UnimplementedWebhookServant can be embedded to have forward compatible implementations.
type UnimplementedWebhookServant struct{}

func (UnimplementedWebhookServant) Chain() gin.HandlersChain {
	return nil
}

func (UnimplementedWebhookServant) AudioWebhook(req *web.AudioWebhookReq) mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedWebhookServant) RegisterSession(req *web.SessionRegistrationReq) mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedWebhookServant) mustEmbedUnimplementedWebhookServant() {} 