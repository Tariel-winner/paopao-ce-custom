// Code generated by go-mir. DO NOT EDIT.
// versions:
// - mir v4.2.0

package v1

import (
	"net/http"

	"github.com/alimy/mir/v4"
	"github.com/gin-gonic/gin"
	"github.com/rocboss/paopao-ce/internal/core/ms"
	"github.com/rocboss/paopao-ce/internal/model/web"
)

type Core interface {
	_default_

	// Chain provide handlers chain for gin
	Chain() gin.HandlersChain

	TweetCollectionStatus(*web.TweetCollectionStatusReq) (*web.TweetCollectionStatusResp, mir.Error)
	TweetStarStatus(*web.TweetStarStatusReq) (*web.TweetStarStatusResp, mir.Error)
	SuggestTags(*web.SuggestTagsReq) (*web.SuggestTagsResp, mir.Error)
	SuggestUsers(*web.SuggestUsersReq) (*web.SuggestUsersResp, mir.Error)
	ChangeAvatar(*web.ChangeAvatarReq) mir.Error
	ChangeNickname(*web.ChangeNicknameReq) mir.Error
	ChangePassword(*web.ChangePasswordReq) mir.Error
	UserPhoneBind(*web.UserPhoneBindReq) mir.Error
	GetStars(*web.GetStarsReq) (*web.GetStarsResp, mir.Error)
	GetCollections(*web.GetCollectionsReq) (*web.GetCollectionsResp, mir.Error)
	SendUserWhisper(*web.SendWhisperReq) mir.Error
	ReadAllMessage(*web.ReadAllMessageReq) mir.Error
	ReadMessage(*web.ReadMessageReq) mir.Error
	GetMessages(*web.GetMessagesReq) (*web.GetMessagesResp, mir.Error)
	GetUserInfo(*web.UserInfoReq) (*web.UserInfoResp, mir.Error)
	GetUserOnlineStatus(*web.UserOnlineStatusReq) (*web.UserOnlineStatusResp, mir.Error) // Added this line
	GetCentrifugoToken(*web.CentrifugoTokenReq) (*web.CentrifugoTokenResp, mir.Error)
	SyncSearchIndex(*web.SyncSearchIndexReq) mir.Error

	// Room endpoints
	ListRooms(*web.RoomListReq) (*web.RoomListResp, mir.Error)
	CreateRoom(*web.CreateRoomReq) (*web.Room, mir.Error)
	UpdateRoom(*web.UpdateRoomReq) mir.Error
	GetUserRoom(*web.GetUserRoomReq) (*web.Room, mir.Error)
	GetRoomByID(*web.GetRoomByIDReq) (*web.Room, mir.Error)
	GetRoomByHostID(*web.GetRoomByHostIDReq) (*web.Room, mir.Error)

	// Category endpoints
	GetAllCategories() web.CategoryListResp

	// User management endpoints
	SetUserCategories(*web.SetUserCategoriesReq) (*web.SetUserCategoriesResp, mir.Error)

	// User Reaction endpoints
	CreateUserReaction(*web.CreateUserReactionReq) (*web.CreateUserReactionResp, mir.Error)
	GetUserReactionsCounts(*web.GetUserReactionsReq) (*web.GetUserReactionsResp, mir.Error)
	GetUserReactionUsers(*web.GetUserReactionUsersReq) (*web.GetUserReactionUsersResp, mir.Error)
	GetUserGivenReactionsCounts(*web.GetUserGivenReactionsReq) (*web.GetUserGivenReactionsResp, mir.Error)
	GetUserGivenReactionUsers(*web.GetUserGivenReactionUsersReq) (*web.GetUserGivenReactionUsersResp, mir.Error)
	GetReactionsToTwoUsers(*web.GetReactionsToTwoUsersReq) (*web.GetReactionsToTwoUsersResp, mir.Error)
	GetGlobalReactionTimeline(*web.GetGlobalReactionTimelineReq) (*web.GetGlobalReactionTimelineResp, mir.Error)
	GetUserReactionTimeline(*web.GetUserReactionTimelineReq) (*web.GetUserReactionTimelineResp, mir.Error)

	mustEmbedUnimplementedCoreServant()
}

// RegisterCoreServant register Core servant to gin
func RegisterCoreServant(e *gin.Engine, s Core) {
	router := e.Group("v1")
	// use chain for router
	middlewares := s.Chain()
	router.Use(middlewares...)

	// register routes info to router
	router.Handle("GET", "/post/collection", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.TweetCollectionStatusReq)
		var bv _binding_ = req
		if err := bv.Bind(c); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.TweetCollectionStatus(req)
		s.Render(c, resp, err)
	})
	router.Handle("GET", "/post/star", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.TweetStarStatusReq)
		var bv _binding_ = req
		if err := bv.Bind(c); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.TweetStarStatus(req)
		s.Render(c, resp, err)
	})
	router.Handle("GET", "/suggest/tags", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.SuggestTagsReq)
		var bv _binding_ = req
		if err := bv.Bind(c); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.SuggestTags(req)
		s.Render(c, resp, err)
	})
	router.Handle("GET", "/suggest/users", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.SuggestUsersReq)
		var bv _binding_ = req
		if err := bv.Bind(c); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.SuggestUsers(req)
		s.Render(c, resp, err)
	})
	router.Handle("POST", "/user/avatar", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.ChangeAvatarReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return
		}
		s.Render(c, nil, s.ChangeAvatar(req))
	})
	router.Handle("POST", "/user/nickname", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.ChangeNicknameReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return
		}
		s.Render(c, nil, s.ChangeNickname(req))
	})
	router.Handle("POST", "/user/password", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.ChangePasswordReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return
		}
		s.Render(c, nil, s.ChangePassword(req))
	})
	router.Handle("POST", "/user/phone", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.UserPhoneBindReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return
		}
		s.Render(c, nil, s.UserPhoneBind(req))
	})
	router.Handle("GET", "/user/stars", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.GetStarsReq)
		var bv _binding_ = req
		if err := bv.Bind(c); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.GetStars(req)
		s.Render(c, resp, err)
	})
	router.Handle("GET", "/user/collections", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.GetCollectionsReq)
		var bv _binding_ = req
		if err := bv.Bind(c); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.GetCollections(req)
		s.Render(c, resp, err)
	})
	router.Handle("POST", "/user/whisper", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.SendWhisperReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return
		}
		s.Render(c, nil, s.SendUserWhisper(req))
	})
	router.Handle("POST", "/user/message/readall", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.ReadAllMessageReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return
		}
		s.Render(c, nil, s.ReadAllMessage(req))
	})
	router.Handle("POST", "/user/message/read", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.ReadMessageReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return
		}
		s.Render(c, nil, s.ReadMessage(req))
	})
	router.Handle("GET", "/user/messages", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.GetMessagesReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.GetMessages(req)
		if err != nil {
			s.Render(c, nil, err)
			return
		}
		var rv _render_ = resp
		rv.Render(c)
	})
	router.Handle("GET", "/user/info", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.UserInfoReq)
		var bv _binding_ = req
		if err := bv.Bind(c); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.GetUserInfo(req)
		s.Render(c, resp, err)
	})
	router.Handle("GET", "/user/online-status", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.UserOnlineStatusReq)
		var bv _binding_ = req
		if err := bv.Bind(c); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.GetUserOnlineStatus(req)
		s.Render(c, resp, err)
	})
	router.Handle("GET", "/centrifugo/token", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.CentrifugoTokenReq)
		var bv _binding_ = req
		if err := bv.Bind(c); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.GetCentrifugoToken(req)
		s.Render(c, resp, err)
	})
	router.Handle("GET", "/sync/index", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.SyncSearchIndexReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return
		}
		s.Render(c, nil, s.SyncSearchIndex(req))
	})

	// Room endpoints
	router.Handle("GET", "/rooms", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.RoomListReq)
		var bv _binding_ = req
		if err := bv.Bind(c); err != nil {
			s.Render(c, nil, err)
			return
		}
		// Get user ID from context for category prioritization
		req.User = &ms.User{
			Model: &ms.Model{
				ID: c.GetInt64("UID"),
			},
		}
		resp, err := s.ListRooms(req)
		s.Render(c, resp, err)
	})
	router.Handle("POST", "/rooms", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.CreateRoomReq)
		var bv _binding_ = req
		if err := bv.Bind(c); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.CreateRoom(req)
		s.Render(c, resp, err)
	})
	router.Handle("PUT", "/rooms/:id", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.UpdateRoomReq)
		var bv _binding_ = req
		if err := bv.Bind(c); err != nil {
			s.Render(c, nil, err)
			return
		}
		s.Render(c, nil, s.UpdateRoom(req))
	})
	router.Handle("GET", "/rooms/user", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.GetUserRoomReq)
		var bv _binding_ = req
		if err := bv.Bind(c); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.GetUserRoom(req)
		s.Render(c, resp, err)
	})
	router.Handle("GET", "/rooms/:id", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.GetRoomByIDReq)
		var bv _binding_ = req
		if err := bv.Bind(c); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.GetRoomByID(req)
		s.Render(c, resp, err)
	})
	router.Handle("GET", "/rooms/host/:hostId", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.GetRoomByHostIDReq)
		var bv _binding_ = req
		if err := bv.Bind(c); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.GetRoomByHostID(req)
		s.Render(c, resp, err)
	})

	// Category endpoints
	router.Handle("GET", "/categories", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		resp := s.GetAllCategories()
		s.Render(c, resp, nil)
	})

	// User management endpoints
	router.Handle("POST", "/user/categories", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.SetUserCategoriesReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.SetUserCategories(req)
		s.Render(c, resp, err)
	})

	// User Reaction endpoints
	router.Handle("POST", "/user/reaction", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.CreateUserReactionReq)
		var bv _binding_ = req
		if err := bv.Bind(c); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.CreateUserReaction(req)
		s.Render(c, resp, err)
	})
	router.Handle("GET", "/user/reactions", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.GetUserReactionsReq)
		var bv _binding_ = req
		if err := bv.Bind(c); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.GetUserReactionsCounts(req)
		s.Render(c, resp, err)
	})
	router.Handle("GET", "/user/reaction/users", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.GetUserReactionUsersReq)
		var bv _binding_ = req
		if err := bv.Bind(c); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.GetUserReactionUsers(req)
		s.Render(c, resp, err)
	})
	router.Handle("GET", "/user/given-reactions", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.GetUserGivenReactionsReq)
		var bv _binding_ = req
		if err := bv.Bind(c); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.GetUserGivenReactionsCounts(req)
		s.Render(c, resp, err)
	})
	router.Handle("GET", "/user/given-reaction/users", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.GetUserGivenReactionUsersReq)
		var bv _binding_ = req
		if err := bv.Bind(c); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.GetUserGivenReactionUsers(req)
		s.Render(c, resp, err)
	})
	router.Handle("GET", "/user/reactions/to-two-users", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.GetReactionsToTwoUsersReq)
		var bv _binding_ = req
		if err := bv.Bind(c); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.GetReactionsToTwoUsers(req)
		s.Render(c, resp, err)
	})
	router.Handle("GET", "/user/reactions/timeline/global", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.GetGlobalReactionTimelineReq)
		var bv _binding_ = req
		if err := bv.Bind(c); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.GetGlobalReactionTimeline(req)
		s.Render(c, resp, err)
	})
	router.Handle("GET", "/user/reactions/timeline/user", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.GetUserReactionTimelineReq)
		var bv _binding_ = req
		if err := bv.Bind(c); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.GetUserReactionTimeline(req)
		s.Render(c, resp, err)
	})
}

// UnimplementedCoreServant can be embedded to have forward compatible implementations.
type UnimplementedCoreServant struct{}

func (UnimplementedCoreServant) Chain() gin.HandlersChain {
	return nil
}

func (UnimplementedCoreServant) TweetCollectionStatus(req *web.TweetCollectionStatusReq) (*web.TweetCollectionStatusResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedCoreServant) TweetStarStatus(req *web.TweetStarStatusReq) (*web.TweetStarStatusResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedCoreServant) SuggestTags(req *web.SuggestTagsReq) (*web.SuggestTagsResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedCoreServant) SuggestUsers(req *web.SuggestUsersReq) (*web.SuggestUsersResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedCoreServant) ChangeAvatar(req *web.ChangeAvatarReq) mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedCoreServant) ChangeNickname(req *web.ChangeNicknameReq) mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedCoreServant) ChangePassword(req *web.ChangePasswordReq) mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedCoreServant) UserPhoneBind(req *web.UserPhoneBindReq) mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedCoreServant) GetStars(req *web.GetStarsReq) (*web.GetStarsResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedCoreServant) GetCollections(req *web.GetCollectionsReq) (*web.GetCollectionsResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedCoreServant) SendUserWhisper(req *web.SendWhisperReq) mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedCoreServant) ReadAllMessage(req *web.ReadAllMessageReq) mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedCoreServant) ReadMessage(req *web.ReadMessageReq) mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedCoreServant) GetMessages(req *web.GetMessagesReq) (*web.GetMessagesResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedCoreServant) GetUserInfo(req *web.UserInfoReq) (*web.UserInfoResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedCoreServant) GetUserOnlineStatus(req *web.UserOnlineStatusReq) (*web.UserOnlineStatusResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedCoreServant) GetCentrifugoToken(req *web.CentrifugoTokenReq) (*web.CentrifugoTokenResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedCoreServant) SyncSearchIndex(req *web.SyncSearchIndexReq) mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

// Room endpoints
func (UnimplementedCoreServant) ListRooms(req *web.RoomListReq) (*web.RoomListResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedCoreServant) CreateRoom(req *web.CreateRoomReq) (*web.Room, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedCoreServant) UpdateRoom(req *web.UpdateRoomReq) mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedCoreServant) GetUserRoom(req *web.GetUserRoomReq) (*web.Room, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedCoreServant) GetRoomByID(req *web.GetRoomByIDReq) (*web.Room, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedCoreServant) GetRoomByHostID(req *web.GetRoomByHostIDReq) (*web.Room, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

// Category endpoints
func (UnimplementedCoreServant) GetAllCategories() web.CategoryListResp {
	return web.CategoryListResp{Categories: []*web.Category{}}
}

func (UnimplementedCoreServant) SetUserCategories(req *web.SetUserCategoriesReq) (*web.SetUserCategoriesResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

// User Reaction endpoints
func (UnimplementedCoreServant) CreateUserReaction(req *web.CreateUserReactionReq) (*web.CreateUserReactionResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedCoreServant) GetUserReactions(req *web.GetUserReactionsReq) (*web.GetUserReactionsResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedCoreServant) GetUserReactionUsers(req *web.GetUserReactionUsersReq) (*web.GetUserReactionUsersResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedCoreServant) GetUserGivenReactions(req *web.GetUserGivenReactionsReq) (*web.GetUserGivenReactionsResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedCoreServant) GetUserGivenReactionUsers(req *web.GetUserGivenReactionUsersReq) (*web.GetUserGivenReactionUsersResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedCoreServant) GetReactionsToTwoUsers(req *web.GetReactionsToTwoUsersReq) (*web.GetReactionsToTwoUsersResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedCoreServant) GetGlobalReactionTimeline(req *web.GetGlobalReactionTimelineReq) (*web.GetGlobalReactionTimelineResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedCoreServant) GetUserReactionTimeline(req *web.GetUserReactionTimelineReq) (*web.GetUserReactionTimelineResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedCoreServant) mustEmbedUnimplementedCoreServant() {}
